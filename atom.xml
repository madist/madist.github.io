<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Reality</title>
  
  <subtitle>Stay Hungry, Stay Foolish</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://madist.github.io/"/>
  <updated>2018-06-06T08:53:42.864Z</updated>
  <id>https://madist.github.io/</id>
  
  <author>
    <name>GiPyeong.Lee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hbase - Shell Command</title>
    <link href="https://madist.github.io/2018/06/06/Hbase-Shell/"/>
    <id>https://madist.github.io/2018/06/06/Hbase-Shell/</id>
    <published>2018-06-06T06:40:00.000Z</published>
    <updated>2018-06-06T08:53:42.864Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --></p><h4 id="시작하기에-앞서서"><a href="#시작하기에-앞서서" class="headerlink" title="시작하기에 앞서서"></a>시작하기에 앞서서</h4><p>아래 코드의 <code>{string}</code>의 경우 여러분께서 원하시는 값으로 교체하여 사용하시면 됩니다.<br>예를 들면 다음과 같습니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scan &apos;&#123;tableName&#125;&apos;, &#123;LIMIT=&gt;10&#125;</span><br></pre></td></tr></table></figure></p><p>위의 예시에 만일 tableName 이 <code>UserTable</code> 라면, 위의 명령어는 다음과 같이 사용합니다.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scan &apos;UserTable&apos;, &#123;LIMIT=&gt;10&#125;</span><br></pre></td></tr></table></figure></p><p>본 post 는 <code>hbase shell</code> 을 사용하며 정리한 내용입니다.</p><h4 id="LIMIT"><a href="#LIMIT" class="headerlink" title="LIMIT"></a>LIMIT</h4><p>출력하고자 하는 ROW 의 최대치<br><figure class="highlight bash"><figcaption><span>hbase(main):008:0</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scan <span class="string">'&#123;tableName&#125;'</span>, &#123;LIMIT=&gt;10&#125;</span><br></pre></td></tr></table></figure></p><h4 id="PrefixFilter"><a href="#PrefixFilter" class="headerlink" title="PrefixFilter"></a>PrefixFilter</h4><p>Row Key Prefix 필터입니다. 키의 prefix 를 설정하여 row를 필터링합니다.</p><blockquote><p>Information<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Syntax:  PrefixFilter (‘&lt;row_prefix&gt;’)</span><br><span class="line">Example: PrefixFilter (‘Row’)</span><br></pre></td></tr></table></figure></p></blockquote><figure class="highlight bash"><figcaption><span>Terminal</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scan <span class="string">'&#123;tableName&#125;'</span>, &#123;LIMIT=&gt;10,FILTER=&gt;<span class="string">"PrefixFilter('&#123;prefixKey&#125;')"</span>&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="SingleColumnValueFilter"><a href="#SingleColumnValueFilter" class="headerlink" title="SingleColumnValueFilter"></a>SingleColumnValueFilter</h4><p><code>column family</code>의  <code>qualifier</code>에 대하여, 지정한 비교연산자와 매칭하는 결과를 받도록 하는 필터입니다.</p><ul><li>참고사항<ul><li><code>filterIfColumnMissing_boolean</code> 값이 true 일 경우, 지정한 <code>column family</code>가 존재하지 않을 경우 <code>row</code>를 반환하지 않습니다. <small>( default : false)</small></li><li><code>latest_version_boolean</code> 값이 false 일 경우, 최근 데이터 뿐만아니라 이전 데이터에서도 해당 작업을 수행합니다. <small>( default : true)</small></li></ul></li></ul><blockquote><p>Information<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Syntax:  SingleColumnValueFilter (‘&lt;family&gt;’, ‘&lt;qualifier&gt;’, &lt;compare operator&gt;, ‘&lt;comparator&gt;’, &lt;filterIfColumnMissing_boolean&gt;, &lt;latest_version_boolean&gt;)</span><br><span class="line">Syntax:  SingleColumnValueFilter (‘&lt;family&gt;’, ‘&lt;qualifier&gt;’, &lt;compare operator&gt;, ‘&lt;comparator&gt;’)</span><br><span class="line"></span><br><span class="line">Example: SingleColumnValueFilter (‘FamilyA’, ‘Column1’, &lt;=, ‘abc’, true, false)</span><br><span class="line">Example: SingleColumnValueFilter (&apos;FamilyA’, ‘Column1’, &lt;=, ‘abc’)</span><br></pre></td></tr></table></figure></p></blockquote><hr><blockquote><p>Stay Huger, Stay Foolish</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Summary of Hbase Commands&lt;br&gt;
    
    </summary>
    
      <category term="Hbase" scheme="https://madist.github.io/categories/Hbase/"/>
    
    
      <category term="Shell" scheme="https://madist.github.io/tags/Shell/"/>
    
      <category term="Hbase" scheme="https://madist.github.io/tags/Hbase/"/>
    
  </entry>
  
  <entry>
    <title>OracleDB Tips</title>
    <link href="https://madist.github.io/2017/09/09/OracleDB-Tips/"/>
    <id>https://madist.github.io/2017/09/09/OracleDB-Tips/</id>
    <published>2017-09-09T12:34:11.000Z</published>
    <updated>2018-06-06T06:43:29.592Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><br><strong> 1. 기존의 테이블에 고유번호 부여하기 </strong><br><blockquote><ol><li><p>시퀀스 생성<br>CREATE SEQUENCE <code>{SEQUENCE NAME}</code> START WITH 1 INCREMENT BY 1 NOCACHE;</p></li><li><p>고유번호가 될 열 추가<br>ALTER TABLE <code>{TABLE_NAME}</code> ADD( <code>{COLUMN_NAME}</code> Number );</p></li><li><p>시퀀스값으로 고유번호 업데이트<br>UPDATE <code>{TABLE_NAME}</code> SET <code>{COLUMN_NAME}</code> = <code>{SEQUENCE NAME}.nextval</code></p></li></ol><p>cf. 시퀀스 존재 유무 체크<br>SELECT * FROM all_sequences WHERE sequence_name = ‘{SEQUENCE NAME}’;</p><footer><strong>Madist</strong><cite>고유번호 부여</cite></footer></blockquote></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;오라클 디비를 사용하면서 알게된 부분들을 간단하게 정리하였습니다.&lt;br&gt;비록 오라클DB를 많이 접할 기회는 없지만, 오라를DB를 사용하게 될 때마다 기록할 예정입니다.&lt;br&gt;
    
    </summary>
    
      <category term="DB" scheme="https://madist.github.io/categories/DB/"/>
    
    
      <category term="Oracle" scheme="https://madist.github.io/tags/Oracle/"/>
    
      <category term="AutoIncreasement" scheme="https://madist.github.io/tags/AutoIncreasement/"/>
    
      <category term="Sequence" scheme="https://madist.github.io/tags/Sequence/"/>
    
  </entry>
  
  <entry>
    <title>MENS Stack</title>
    <link href="https://madist.github.io/2017/07/07/MENS-Stack/"/>
    <id>https://madist.github.io/2017/07/07/MENS-Stack/</id>
    <published>2017-07-07T07:43:07.000Z</published>
    <updated>2018-06-06T06:43:29.592Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><p>우선, npm 을 이용하여 개발 환경을 셋팅하자.</p><figure class="highlight bash"><figcaption><span>bash</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir api &amp;&amp; <span class="built_in">cd</span> api</span><br><span class="line">$ npm init --yes</span><br><span class="line">$ npm install --save --save-exact express body-parser mongoose</span><br></pre></td></tr></table></figure><p>기본적인 개발 환경이 구성됐다면, package.json 에 사용할 패키지들의 정보를 작성한다.<br>이번에 사용하여 구현할 패키지들의 구성은 다음과 같다.</p><figure class="highlight json"><figcaption><span>package.json</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"name"</span>: <span class="string">"Server"</span>,</span><br><span class="line">  <span class="attr">"version"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">  <span class="attr">"description"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"main"</span>: <span class="string">"index.js"</span>,</span><br><span class="line">  <span class="attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="attr">"test"</span>: <span class="string">"echo \"Error: no test specified\" &amp;&amp; exit 1"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"keywords"</span>: [],</span><br><span class="line">  <span class="attr">"author"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"license"</span>: <span class="string">"ISC"</span>,</span><br><span class="line">  <span class="attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="attr">"body-parser"</span>: <span class="string">"1.17.2"</span>,</span><br><span class="line">    <span class="attr">"express"</span>: <span class="string">"4.15.3"</span>,</span><br><span class="line">    <span class="attr">"mongoose"</span>: <span class="string">"4.11.1"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>기본적인 설정이 끝났다. 다음은 디렉터리 설정을 할 예정이다.</p><figure class="codeblock codeblock--tabbed"><figcaption><span>디렉토리 구조</span><ul class="tabs"><li class="tab active">tree</li><li class="tab">command</li></ul></figcaption><div class="tabs-content"><figure class="highlight plain" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Server/</span><br><span class="line">|-- config/</span><br><span class="line">|-- controllers/</span><br><span class="line">|       |-- userController.js</span><br><span class="line">|-- models/</span><br><span class="line">|       |-- userModel.js</span><br><span class="line">|-- routes/</span><br><span class="line">|       |-- userRoute.js</span><br><span class="line">|-- app.js</span><br><span class="line">|-- controllers.js</span><br><span class="line">|-- models.js</span><br><span class="line">|-- routes.js</span><br><span class="line">|__ package.js</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mkdir controllers</span><br><span class="line">touch controllers/userController.js</span><br><span class="line">mkdir models</span><br><span class="line">touch models/userModel.js</span><br><span class="line">mkdir routes </span><br><span class="line">touch routes/userRoute.js</span><br><span class="line">touch app.js</span><br><span class="line">touch controllers.js</span><br><span class="line">touch models.js</span><br><span class="line">touch routes.js</span><br></pre></td></tr></tbody></table></figure></div></figure><p>다음은, Node.js 어플리케이션을 작성하기에 앞서 작성시의 권고사항들을 짚고 가겠다.<br>아래 스타일가이드는 <a href="http://nodeguide.com/style.html" target="_blank" rel="noopener">Felix’s Node.js Style Guide</a> 의 일부이다.<br>각 권고사항에 따른 부가 설명 혹은 사견을 달았다.</p><p><strong> 1. 동기보다는 <code>비동기</code> 함수를 사용하라 </strong><br><blockquote><p>Node.js 는 쓰레드나 별도 프로세스 대신 비동기 이벤트 위주 I/O 를 사용하는 고도의 확장성을 가진 시스템이다.<br>간단한 작업을 수행하지만 접근 빈도가 높은 웹 어플리케이션에 적합하다.</p><footer><strong>Shelley Powers</strong><cite>Learning Node</cite></footer></blockquote></p><p><strong> 2. <code>2칸</code> 들여쓰기를 사용하라. </strong><br><blockquote><p>칸수보다는 일관성이 중요하다고 생각한다.</p><footer><strong>Madist</strong><cite>MEAN Stack</cite></footer></blockquote></p><p><strong> 3. 세미콜론을 사용하라 / 세미콜론을 사용하지 마라. </strong><br><blockquote><p>근래 들어, 많은 언어들이 세미콜론 없이도 해석을 한다.<br>그치만, 나의 경우 습관이고, 명확하다고 판단하여 <code>;</code> 세미콜론을 사용한다.</p><footer><strong>Madist</strong><cite>MEAN Stack</cite></footer></blockquote></p><p><strong> 4. 작은 따옴표를 사용하라. </strong><br><blockquote><p>PHP의 경우 단순 스트링의 경우 작은 따옴표를 이용하여 작성하는게 큰 따옴표보다 성능이 더 좋다.<br>( 변수를 해석하냐 안하냐 차이라고 생각된다. 보다 자세한사항은 검색해보면 나온다.)<br>Node.js 의 경우에는 성능상의 차이라기보다는, 표현상의 차이라고 생각된다.<br>이건 작은이든, 큰 따옴표든 일관성있게만 진행하면 될 것으로 생각된다.</p><footer><strong>Madist</strong><cite>MEAN Stack</cite></footer></blockquote></p><p><strong> 5. 여러 개의 변수를 정의 시에 단일 var 키워드를 사용하라 / 단일 var 키워드를 사용하지 마라. </strong><br><blockquote><p>중요한지 잘 모르겠다.</p><footer><strong>Madist</strong><cite>MEAN Stack</cite></footer></blockquote></p><p><strong> 6. 상수는 모두 대문자여야 한다. </strong><br><blockquote><p>이 항목에 동의한다.</p><footer><strong>Shelley Powers</strong><cite>Learning Node</cite></footer></blockquote></p><p><strong> 7. 변수는 camel 표기법을 사용한다. </strong><br><blockquote><p>이 항목에 동의한다.</p><footer><strong>Madist</strong><cite>MEAN Stack</cite></footer></blockquote></p><p><strong> 8. 완전 항등 연산자 (strict equality operator, ===)를 사용하라. </strong><br><blockquote><p>이 항목에 동의한다. <code>==</code> 의 경우 내가 의도치 않은 결과물을 낼 수 있다.</p><footer><strong>Madist</strong><cite>MEAN Stack</cite></footer></blockquote></p><p><strong> 9. 클로저에 이름을 붙여라. </strong><br><blockquote><p><figure class="codeblock codeblock--tabbed"><figcaption><span>클로져</span><ul class="tabs"><li class="tab active">Named</li><li class="tab">UnNamed</li></ul></figcaption><div class="tabs-content"><figure class="highlight plain" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">req.on(‘end’, function onEnd() {</span><br><span class="line">  console.log(‘Right’);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">req.on(‘end’, function() {</span><br><span class="line">  console.log(‘Wrong’);</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div></figure><br>function 명을 꼭 붙이자. <code>onEnd</code></p><footer><strong>Felix,</strong><cite><a href="http://nodeguide.com/style.html#named-closures" target="_blank" rel="noopener">Style Guide</a></cite></footer></blockquote></p><p><strong> 10. 라인 길이가 80자 이하여야 한다. </strong><br><blockquote><p>이 항목에 동의한다. 모듈화하여 분할 하는게 현명하다.</p><footer><strong>Madist</strong><cite>MEAN Stack</cite></footer></blockquote></p><p><strong> 11. 중괄호는 중괄호를 필요로 하는 것과 같은 줄에서 시작한다. </strong><br><blockquote><p><figure class="codeblock codeblock--tabbed"><figcaption><span>중괄호</span><ul class="tabs"><li class="tab active">SameLine</li><li class="tab">NewLine</li></ul></figcaption><div class="tabs-content"><figure class="highlight plain" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if (true) {</span><br><span class="line">  console.log(‘winning’);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">if (true) </span><br><span class="line">{</span><br><span class="line">  console.log(‘winning’);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure><br>이 항목에 동의한다. ( 나는 모든 코드가 11번 가이드를 따르고 있다.)</p><footer><strong>Felix,</strong><cite><a href="http://nodeguide.com/style.html#braces" target="_blank" rel="noopener">Style Guide</a></cite></footer></blockquote></p><p>추후 코드 작성시 최대한 위의 코딩스타일을 준수하며 작업할 예정이다.</p><blockquote><p>Stay Huger, Stay Foolish</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;여러가지 서버 스택이 있겠지만, 그 중 해보고 싶었던 MEAN Stack 을 응용하여 API 서버를 작성하였다.&lt;br&gt;내가 작업할 MENS Stack 은 다음과 같다.&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;M (MongoDB) : NoSQL 데이터베이스이다. 도큐먼트 기반의 데이터베이스로, JSON 형태의 스킴을 작성할 것이다.&lt;br&gt;E (Express.js) : 미들 웨어 작성을 위해 사용할 프레임웍이다.&lt;br&gt;N (Node.js) : Javascript 기반의 서버사이드 언어이다.&lt;br&gt;S (Socket.io) : 실시간 서버에서 사용할 웹소켓이다.&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Server" scheme="https://madist.github.io/categories/Server/"/>
    
    
      <category term="Node.js" scheme="https://madist.github.io/tags/Node-js/"/>
    
      <category term="Express.js" scheme="https://madist.github.io/tags/Express-js/"/>
    
      <category term="Mongoose" scheme="https://madist.github.io/tags/Mongoose/"/>
    
      <category term="Socket.io" scheme="https://madist.github.io/tags/Socket-io/"/>
    
  </entry>
  
  <entry>
    <title>Swift AutoLayout - Flexible UITableViewCell</title>
    <link href="https://madist.github.io/2017/07/04/UITableView-AutoLayout/"/>
    <id>https://madist.github.io/2017/07/04/UITableView-AutoLayout/</id>
    <published>2017-07-04T02:15:33.000Z</published>
    <updated>2018-06-06T06:43:29.593Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><h2 id="AutoLayout-이란"><a href="#AutoLayout-이란" class="headerlink" title="AutoLayout 이란?"></a>AutoLayout 이란?</h2><p><code>AutoLayout</code>의 경우 <span class="highlight-text primary">Apple Documents</span> 를 참조하면 다음과 같다.<figure class="codeblock codeblock--tabbed"><figcaption><a href="https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/index.html#//apple_ref/doc/uid/TP40010853-CH7-SW1" target="_blank" rel="noopener">AutoLayout</a><ul class="tabs"><li class="tab active">ko</li><li class="tab">en</li></ul></figcaption><div class="tabs-content"><figure class="highlight plain" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">오토레이아웃</span><br><span class="line">오토레이아웃은 뷰계층에 포함된 모든 뷰들의 사이즈와 위치를 각 뷰들에 설정되어 있는 제약사항들을 기반으로 즉시 계산한다.</span><br><span class="line">예를 들면, 버튼을 이미지뷰의 가로 중앙에 놓고, 이미지뷰 아래쪽 8포인트로 제약을 설정해 두면, 이미지뷰의 사이즈와 위치가 변경될 경우, 버튼의 위치가 자동으로 제약사항에 맞게 프레임이 조정된다.</span><br><span class="line">이러한 제약사항을 통해 내부적, 외부적 변경 사항에 따른 `동적으로 변경되는 UI`를 작성할 수 있다.</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Understanding Auto Layout</span><br><span class="line">Auto Layout dynamically calculates the size and position of all the views in your view hierarchy, based on constraints placed on those views. For example, you can constrain a button so that it is horizontally centered with an Image view and so that the button’s top edge always remains 8 points below the image’s bottom. If the image view’s size or position changes, the button’s position automatically adjusts to match.</span><br><span class="line"></span><br><span class="line">This constraint-based approach to design allows you to build user interfaces that dynamically respond to both internal and external changes.</span><br></pre></td></tr></tbody></table></figure></div></figure>위에서 말한 <span class="highlight-text red">외부적 변화</span> 와 <span class="highlight-text blue">내부적 변화</span>은 다음과 같다.</p><figure class="codeblock codeblock--tabbed"><figcaption><a href="https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/index.html#//apple_ref/doc/uid/TP40010853-CH7-SW1" target="_blank" rel="noopener">External Changes</a><ul class="tabs"><li class="tab active">ko</li><li class="tab">en</li></ul></figcaption><div class="tabs-content"><figure class="highlight plain" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">외부적 변화</span><br><span class="line">- 윈도우 크기 조절 (OS X).</span><br><span class="line">- 유저가 iPad 상에서 Split View 진입 혹은 나갈 경우 (iOS).</span><br><span class="line">- 기기 회전시 (iOS).</span><br><span class="line">- 전화 혹은 오디오 레코딩 바가 생기거나 사라질 경우 (iOS).</span><br><span class="line">- 별도의 사이즈 클래스 지원시.</span><br><span class="line">- 멀티 해상도 지원시.</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">External Changes</span><br><span class="line">- The user resizes the window (OS X).</span><br><span class="line">- The user enters or leaves Split View on an iPad (iOS).</span><br><span class="line">- The device rotates (iOS).</span><br><span class="line">- The active call and audio recording bars appear or disappear (iOS).</span><br><span class="line">- You want to support different size classes.</span><br><span class="line">- You want to support different screen sizes.</span><br></pre></td></tr></tbody></table></figure></div></figure><figure class="codeblock codeblock--tabbed"><figcaption><a href="https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/index.html#//apple_ref/doc/uid/TP40010853-CH7-SW1" target="_blank" rel="noopener">Internal Changes</a><ul class="tabs"><li class="tab active">ko</li><li class="tab">en</li></ul></figcaption><div class="tabs-content"><figure class="highlight plain" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">내부적 변화</span><br><span class="line">- 앱내 뷰 계층에 들어갈 텍스트 혹은 이미지와 같은 컨텐츠에 변화가 생길 경우</span><br><span class="line">- 로컬화에 따른 변화</span><br><span class="line">    - 첫번째, 언어에 따라 뷰들의 크기가 달라짐.</span><br><span class="line">    - 두번째, 날짜,숫자,통화 등의 경우 지역별로 표현방식이 달라 뷰들의 크기가 달라짐.</span><br><span class="line">    - 세번째, 언어에 따라 배치 방향이 다름</span><br><span class="line">      (`English` left-to-right / `Arabic` right-to-left)</span><br><span class="line">- 앱 실행중 폰트가 Dynamic Type 의 경우</span><br></pre></td></tr></tbody></table></figure><figure class="highlight plain" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Internal Changes</span><br><span class="line">- The content displayed by the app changes.</span><br><span class="line">- The app supports internationalization.</span><br><span class="line">- The app supports Dynamic Type (iOS).</span><br></pre></td></tr></tbody></table></figure></div></figure><p>개략적인 오토레이 아웃에 대한 내용은 위와 같다. 보다 더 자세한 사항은 <a href="https://developer.apple.com/library/content/documentation/UserExperience/Conceptual/AutolayoutPG/index.html#//apple_ref/doc/uid/TP40010853-CH7-SW1" target="_blank" rel="noopener">애플의 도큐먼트</a>를 참조하면 된다.</p><p>아래는 두 가지 레이아웃 방식이다.<br>좌측이 제약사항 없이 사용하던 프레임 레이아웃 방식이고, 우측이 제약사항 레이아웃 방식이다.</p><div class="figure fig-25" style="width:288px;"><a class="fancybox" href="layout_view.png" title="Layout View Style" data-fancybox-group="layout_style"><img class="fig-img" src="layout_view.png" style="width:288px;height:370px;" alt="Layout View Style"></a><span class="caption">Layout View Style</span></div><div class="figure fig-25" style="width:288px;"><a class="fancybox" href="layout_constraints.png" title="Layout Constrain Style" data-fancybox-group="layout_style"><img class="fig-img" src="layout_constraints.png" style="width:288px;height:370px;" alt="Layout Constrain Style"></a><span class="caption">Layout Constrain Style</span></div><div style="clear:both;"></div><p>위의 제약사항 레이아웃을 이용하여 유동적으로 변하는 테이블뷰셀을 만들 수 있었다.</p><blockquote><p>원칙</p><ol><li>좌,우,위,아래 제약사항이 명확히 걸려있어야한다.</li><li>넓이, 높이의 제약사항이 명확해야한다.</li><li>위에서부터 아래까지 물흐르듯이 뷰계층들의 제약이 잘 걸려있어야한다.</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">self.tableView.rowHeight = UITableViewAutomaticDimension // 필수 </span><br><span class="line">self.tableView.estimatedRowHeight = 80 // (평균높이)</span><br></pre></td></tr></table></figure></blockquote><p>위의 원칙을 지키고 작업을 하면 잘 작동한다.<br>아래는 위의 원칙을 지키고 작업한 테이블뷰 셀의 제약사항이다.</p><div class="figure center" style="width:824px;"><a class="fancybox" href="tableCell.png" title="Flexible TableViewCell" data-fancybox-group="flexible_tbcell"><img class="fig-img" src="tableCell.png" style="width:824px;height:228px;" alt="Flexible TableViewCell"></a><span class="caption">Flexible TableViewCell</span></div><div style="clear:both;"></div><div class="figure fig-50" style="width:283px;"><a class="fancybox" href="view_top.png" title="제약사항의 가장 위쪽에 위치한 뷰의 제약사항" data-fancybox-group="flexible_tbcell"><img class="fig-img" src="view_top.png" style="width:283px;height:510px;" alt="제약사항의 가장 위쪽에 위치한 뷰의 제약사항"></a><span class="caption">제약사항의 가장 위쪽에 위치한 뷰의 제약사항</span></div><div class="figure fig-50" style="width:288px;"><a class="fancybox" href="view_flexible.png" title="실제 텍스트가 늘어났다 줄었다 하는 라벨 입니다" data-fancybox-group="flexible_tbcell"><img class="fig-img" src="view_flexible.png" style="width:288px;height:456px;" alt="실제 텍스트가 늘어났다 줄었다 하는 라벨 입니다"></a><span class="caption">실제 텍스트가 늘어났다 줄었다 하는 라벨 입니다</span></div><div style="clear:both;"></div><p>위의 제약사항들로 만들어진 결과물은 다음과 같다.<br>텍스트가 길어져도, 혹은 짧아저도 걸어둔 제약사항을 이용하여 유동적으로 변하는 테이블뷰를 만들 수 있다.</p><div class="figure center" style="width:321px;"><a class="fancybox" href="result.png" title="위의 제약사항의 결과물입니다." data-fancybox-group="flexible_result"><img class="fig-img" src="result.png" style="width:321px;height:317px;" alt="위의 제약사항의 결과물입니다."></a><span class="caption">위의 제약사항의 결과물입니다.</span></div><div style="clear:both;"></div><p>위의 결과물을 만들기 위해 참조 하였던 <a href="self_sizing.zip">소스코드</a>를 공유합니다.</p><blockquote><p>Stay Huger, Stay Foolish</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;UITableView 를 사용하는데 있어서, 그동안 코딩으로 가변형 처리를 해왔다.&lt;br&gt;그러나, 이번에 UITableViewCell 의 &lt;code&gt;AutoLayout&lt;/code&gt;을 이용하면 보다 편리하게 처리할 수 있다는 것을 알게 되어 몇글자 적어본다.&lt;br&gt;모든 시작에 앞어, &lt;code&gt;AutoLayout&lt;/code&gt; 에 대해서 먼저 짚고 넘어간다.&lt;/p&gt;
    
    </summary>
    
      <category term="AuotoLayout" scheme="https://madist.github.io/categories/AuotoLayout/"/>
    
    
      <category term="UITableView" scheme="https://madist.github.io/tags/UITableView/"/>
    
      <category term="AutoLayout" scheme="https://madist.github.io/tags/AutoLayout/"/>
    
      <category term="Swift" scheme="https://madist.github.io/tags/Swift/"/>
    
  </entry>
  
  <entry>
    <title>Stay Hunger, Stay Foolish</title>
    <link href="https://madist.github.io/2017/06/27/home/"/>
    <id>https://madist.github.io/2017/06/27/home/</id>
    <published>2017-06-27T13:57:17.000Z</published>
    <updated>2018-06-06T06:43:29.607Z</updated>
    
    <content type="html"><![CDATA[<!-- excerpt --><br>20대가 되면서, 그렇게 꿈에 그리던 개발을 시작했다. 학부시절 대학원에서 공부도 해보고, 좋은 기회들을 얻었다.<br>외주를 하고, 소프트웨어 마에스트로 연수도 받고, 삼성 소프트웨어 멤버쉽 연수도 받고, 개인 앱도 만들어서 런칭해보고.<br>API 서버도 만들어 운영해보고, AWS를 이용하여 인프라를 구축해보고, 자동화가 필요하여 루비 스크립트를 짜기도 하고,<br>무언가 많이 해본 것 같다. 그런데, 왜 내가 해온 이 모든 것들이 보잘것 없게 느껴질까.<br>그 동안 나의 개발에 철학이 있었는지 지금 이 순간부터 다시 생각해본다.<br>돈을 벌기 위해 개발하고 있는 것인가.<br>나는 무엇을 위해 개발을 하고, 어떤 꿈을 꾸고 있는가?<br>지금 나는 공부가 절실히 필요한 시기이다. 이 곳은, 나의 부족함을 메우는 곳이 아닌, 나의 부족함을 기억하기 위한 곳이다.<br>자랑하려고 만든 것이아니라, 누군가에게 보여주기 위해 만든 곳이 아니라. 진심으로 내가 스스로 공부하기 위해 만든 곳이다.<br>비록 지금 내가 작성하는 <code>MarkDown</code>문서가 형편없어 보여도, 하나씩 하나씩 공부해나가겠다.<br>내가 대학시절 반해버린 건축가가 한명 있다.<br>그의 이름은 <a href="https://namu.wiki/w/루이스%20칸" target="_blank" rel="noopener"><code>루이스 칸</code></a> 50살의 나이에 이름을 알린 그는 그 긴 기간동안 공부를 했다. 건축의 본질을 말이다.<br>내가 내릴 개발의 본질은 무엇이고, 내가 찾을 개발의 목적지는 어디인지, 하나씩 찾아가겠다.<br>조급해 하지말고, 항상 열린 마음으로 공부해보자</p><blockquote><p>Stay Hunger, Stay Foolish</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;지금의-나는&quot;&gt;&lt;a href=&quot;#지금의-나는&quot; class=&quot;headerlink&quot; title=&quot;지금의 나는&quot;&gt;&lt;/a&gt;지금의 나는&lt;/h3&gt;&lt;p&gt;니체를 만나고, 김훈을 만나며 내 스스로는 많이 변해왔다.&lt;br&gt;그져 공부를 안하기 위해 애썼던 나의 10대 유년기시절. 요슈타인 가아더는 내 삶의 등불이었다.&lt;br&gt;
    
    </summary>
    
    
      <category term="madist" scheme="https://madist.github.io/tags/madist/"/>
    
  </entry>
  
</feed>
